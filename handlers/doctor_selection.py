from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database.doctors import doctors
import os

async def choose_doctor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
        
    await query.answer()
    
    # Send doctor information with images
    for doctor_name, doctor_info in doctors.items():
        image_path = doctor_info['image']
        if os.path.exists(image_path):
            caption = f"ü©∫ {doctor_name}\nüìã –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {doctor_info['specialization']}"
            try:
                with open(image_path, 'rb') as photo:
                    await query.message.reply_photo(
                        photo=photo,
                        caption=caption
                    )
            except Exception as e:
                print(f"Error sending photo for {doctor_name}: {e}")
    
    # Create keyboard with doctor selection buttons
    keyboard = []
    for doctor_name in doctors.keys():
        keyboard.append([InlineKeyboardButton(doctor_name, callback_data=f"doctor_{doctor_name}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:", reply_markup=reply_markup)

async def doctor_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
        
    await query.answer()
    
    doctor_name = query.data.replace("doctor_", "")
    if doctor_name not in doctors:
        await query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
        
    # Store selected doctor in user data
    context.user_data['selected_doctor'] = doctor_name
    
    from config import CONSULTATION_PRICE, KASPI_PAYMENT_LINK
    payment_message = (
        f"–î–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ —Å –≤—Ä–∞—á–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É.\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {CONSULTATION_PRICE:,} —Ç–≥\n\n"
        f"–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
    )
    
    keyboard = [
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=KASPI_PAYMENT_LINK)],
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="confirm_payment")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(payment_message, reply_markup=reply_markup)